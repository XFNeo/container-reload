[env]
LOG_LEVEL = INFO
API_KEY = change-me
SECURITY_APIKEY_HEADER_VALUE = change-me
ORIGIN_SERVER_AUTH_HEADER_VALUE = change-me
TRAEFIK_HOST = example.com
NANO_CPUS = 300_000_000
MEM_LIMIT = 128m
CONTAINER_NETWORK = web

[logging]
level = ${env:LOG_LEVEL}

[docker]
base_url = unix://var/run/docker.sock

[auth]
header = apikey
api_key = ${env:API_KEY}

[filter]
label = forex-cache

[container healthcheck]
check_command = bash -c '[ 200 == $$(curl -s -o /dev/null -I -w "%{http_code}" http://localhost:8080/health) ]'
check_interval = 5
retries = 5

[container options]
nano_cpus = ${env:NANO_CPUS}
mem_limit = ${env:MEM_LIMIT}
network = ${env:CONTAINER_NETWORK}

[container restart policy]
Name = always

[container environments]
SECURITY_APIKEY_HEADER_VALUE = ${env:SECURITY_APIKEY_HEADER_VALUE}
ORIGIN_SERVER_AUTH_HEADER_VALUE = ${env:ORIGIN_SERVER_AUTH_HEADER_VALUE}

[container labels]
forex-cache =
traefik.enable = true
traefik.http.routers.forex-cache.rule = Host(`${env:TRAEFIK_HOST}`) && PathPrefix(`/forex-cache/api/v1/`)
traefik.http.routers.forex-cache.entrypoints = websecure
traefik.http.routers.forex-cache.tls.certresolver = myresolver
traefik.http.routers.forex-cache.middlewares = forex-cache-rewrite
traefik.http.middlewares.forex-cache-rewrite.replacepathregex.regex=^/forex-cache/api/v1/(.*)
traefik.http.middlewares.forex-cache-rewrite.replacepathregex.replacement=/api/v1/$$$$1
traefik.http.services.forex-cache-service.loadbalancer.server.port = 8080
